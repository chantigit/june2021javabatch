========================================================================================
Servlet preparation ways
War file creation & War file deployment in tomcat
Servlet communication/collobaration ways
Servlet life cycle states & methods
Servlet Scopes
	request scope
	session scope
	context scope
State Management techniques/ Session Tracking Mechanisms:
	1.Sessions
	2.Cookies
	3.Hidden Form Field
	4.Url rewriting

CRUD Operations
=======================================================================================

2.Cookies:
==========
Def:
	A cookie is a piece of memory in browser to store username,pswd,..   which are send by server.
Flow of actions:
	1.
	2.
	3.
	4.
	5.
	6.
	
Q1. How to create cookie object &  How to set data into the cookie ?	
		
		Cookie   cookieobjectname=new   Cookie(String key,String value);
		
Q2. How to send cookie object to the browser

		response.addCookie(cookieobjectname);

Q3. How to get cookies from browser ?

		request.getCookies()


Types of cookies:

	1.Impersistent cookie	:	As long as browser closed then cookie is deleted from browser
								Also called as Default Cookie.
								
	2.Persistent cookie		:	Using "setMaxAge(sec)" we can save cookie in browser for particular time.
								It is configurable cookie.
	








4.Hidden Form field:
====================
In case of Hidden Form Field a hidden (invisible) textfield is used for maintaining the state of an user.
In such case, we store the information in the hidden field and get it from another server.
This approach is better if we have to submit form in all the pages and we don't want to depend on the browser.

syntax:

	<input type="hidden" name="name1" value="Chanti">  


Advantages:

	->It will always work whether cookie is disabled or not(browser independent)..
	
Disadvantages:

	->Extra form submission is required on each pages.
	->Only textual information can be used.








3 . URL Rewriting:
=================
In URL rewriting, we append a token or identifier to the URL of the next resource. 

We can send parameter name & value pairs using the following format:

Syntax:
	url?name1=value1&name2=value2& .....

Advantages:

	->It will always work whether cookie is disabled or not (browser independent).
	->Extra form submission is not required on each pages.
	
Disadvantages:

	->It will work only with links.
	->It can send Only textual information.

=================================================================================

HttpSession ob=request.getSession();
ob.setAttribute(k,v);
ob.getAttribute(k);

Cookie c=new Cookie(k,v);
response.addCookie(c);
request.getCookies();


<form>
	<input type="hidden" name="name1" value="Chanti"> 
	<input type="submit">
</form>

url?name1=value1&name2=value2& .....

================================================================================

Servlet Mapping:
================
Using Servlet Mapping developer can give duplicate name to original servlet & can display on URL.

Servlet Mapping can be done in any of 2 ways:

	1.Using XML tags inside web.xml file			=>Per servlet 8 lines of code
	2.Using @WebServlet() annotation				=>Per servlet 1 line of code


1.Using XML tags inside web.xml file:
=====================================
To do servlet mapping in web.xml there can be 3 names we have use per every servlet.

	1.Servlet Class Name	:		<servlet-class>     
	2.Servlet Logical Name	:		<servlet-name>
	3.Servlet URL Name		:		<url-pattern>

1.For servlet mapping we used 2 child tags in web.xml file.

	ChildTag1:		<servlet>
	ChildTag2:		<servlet-mapping>

2.Every <servlet> tag has 2 attributes
		1.<servlet-class> 
		2.<servlet-name> 
		
2.Every <servlet-mapping> tag has 2 attributes
		1.<servlet-name> 
		2.<url-pattern>
syntax:

web.xml:
-------
<?XML version="1.0"?>
<web-app>
		<welcome-file-list>
				<welcome-file> STARTUP PAGE </welcome-file>
		</welcome-file-list>
		<servlet>
					<servlet-class>	Servlet Class Name			</servlet-class>
					<servlet-name> 	Servlet Logical Name		</servlet-name> 
		</servlet>
		<servlet-mapping>
					<servlet-name>	Servlet Logical Name		</servlet-name>
					<url-pattern>	/Servlet URL Name			</url-pattern>
		</servlet-mapping>
</web-app>


example:

web.xml:
-------
<?XML version="1.0"?>
<web-app>
		<welcome-file-list>
				<welcome-file> index.html </welcome-file>
		</welcome-file-list>
		<servlet>
					<servlet-class>	S1		</servlet-class>
					<servlet-name> 	L1		</servlet-name> 
		</servlet>
		<servlet-mapping>
					<servlet-name>	L1		</servlet-name>
					<url-pattern>	/url1	</url-pattern>
		</servlet-mapping>
</web-app>



















