-------------------------------------------------------------
Strings:	Collection / Group / Sequence / Array of characters is called string
========
I.Operations on String:
-----------------------
1.String Preparation    
2.String Concatenation
3.String Comparasion

II.String handling methods:
--------------------------
______________________________________________________________________________________
1.String Preparation:
=====================
	1.Using char datatype
	2.Using String class 		(from java.lang package)
	3.Using StringBuffer class	(from java.lang package)
	4.Using StringBuilder class	(from java.lang package)

	//Acc c ,cpp & java
	char 			name1[]= {'i','n','d','i','a'};		i-0 n-1 d-2 i-3 a-4
	
	//Without new keyword
	String			name2="india";
	//With new keyword
	String  		name3=new String("india");
	
	StringBuffer	name4=new StringBuffer("india");
	
	StringBuilder   name5=new StringBuilder("india");
	
Note:
=====
1.JVM stores strings in "StringPoolArea" which are created by String class 
2.JVM always checks wether string is exist in pool if it created without new keyword.
3.The string object which is created by String class is always IMMUTABLE object.
4.The string object which are created by StringBuffer & StringBuilder classes are always MUTABLE object.

	
2.String Concatenation:
=======================
	sop("Hi"+"Hello");		//HiHello
	
1.Using + operator
2.Using concat() method from String class
3.Using append() method from StringBuffer,StringBuilder classes

Ex1:Using + operator
	String s1="A";
	s1=s1+"B";
	sop(s1);		//AB
	s1=s1+"C"
	sop(s1);		//ABC
	String s2=s1+"D";
	sop(s1);		//ABC
	sop(s2);		//ABCD
	s2=s2+100;
	sop(s2);		//ABCD100
	s2=s2+3.69;
	sop(s2);		//ABCD1003.69
Ex2:Using concat() method
	String s1="A";
	s1.concat("B");
	sop(s1);		//A
	s1=s1.concat("C");
	sop(s1);		//AC
	String s2=s1.concat("D");
	sop(s1);		//AC
	sop(s2);		//ACD
	
	s1.concat(100);	//COMPILE TIME ERROR
	
3.String Comparasion:
=====================
1.Using == operator
2.Using equals() & equalsIgonreCase() methods
3.Using compareTo() & compareToIgnoreCase() methods

	String			name1="Apple";   	
	String			name2="Apple";		
	String			name3="apple";		
	String			name4="Orange"; 
	String			name5=new String("Apple");

Note1:"==" 			operator compares strings based on ADDRESS return boolean values
Note2:"equals()" 	method   compares strings based on CONTENT return boolean values

	sop(name1 == name2 );
	sop(name1 == name3 );
	sop(name1 == name5 );
	sop(name1 == name4 );
	//T FFF
	sop(name1.equals(name2) );
	sop(name1.equals(name4) );
	sop(name1.equals(name5) );
	sop(name5.equals(name2) );
	sop(name1.equals(name3) );//false 
	//TFTTF
	sop(name1.equalsIgonreCase(name3) );//true 


	String			name1="Apple";   	
	String			name2="Apple";		
	String			name3="apple";	
	String			name4="Dog";	
	
	sop(name1.compareTo(name2));   //name1 - name2 = 0
	sop(name1.compareTo(name3));   //name1 - name3 = 65 - 97 = -32
	sop(name3.compareTo(name1));   //name3 - name1 = 97 -65 = 32
	sop(name1.compareTo(name4));   //-3
	sop(name1.compareToIgnoreCase(name3));   //name1 - name3 = 65 - 65 = 0
	
II.String handling methods:
---------------------------
1.concat() 		
2.equals() 
3.equalsIgonreCase()
4.compareTo() 
5.compareToIgnoreCase()

6.length()
7.isEmpty()
8.toLowerCase()
9.toUpperCase()
10.replace()

11.startsWith()
12.endsWith()
13.contains()
14.trim()
15.intern()

16.	substring(begin),
	substring(begin,end)
	
17.	indexOf(int ch),
	indexOf(int ch,int from)
	indexOf(String str)
	indexOf(String str,int from)
	
18.	lastIndexOf(ch)
	lastIndexOf(String)
	
19.charAt()  : Divide string into characters
20.split()	 : Divide string into words


Task1:String s="James Bond 007";
	Count no of vowels,digits,spaces,words

Task2:String s="James Bond 007";
	700 dnoB ...
	
Task3:String s="James Bond 007";
	semaJ  dnoB 700

Task4:String s="Applelelelelelele";
	"le" repeated _  times

